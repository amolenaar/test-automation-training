
plugins {
  id 'java'
  id 'jetty'
}

repositories {
  mavenCentral()
}

configurations {
  fitnesseRuntime
}

// For educational purposes, put Cucumber code in a separate folder.
sourceSets.test {
  java.srcDir 'src/cucumber/stepdefs'
  resources.srcDir 'src/cucumber/features'
}

dependencies {
  testCompile 'junit:junit:4.12'
  testCompile "org.hamcrest:hamcrest-all:1.3"

  // JGiven
  testCompile 'com.tngtech.jgiven:jgiven-junit:0.11.3'
  testCompile 'com.tngtech.jgiven:jgiven-html5-report:0.11.3'
  testCompile 'org.slf4j:slf4j-simple:1.7.21'

  // Cucumber
  testCompile "info.cukes:cucumber-java:1.2.4"

  // FitNesse
  fitnesseRuntime 'org.fitnesse:fitnesse:20160515'
}

task jgivenReport(type: JavaExec, dependsOn: 'test') {
  main = 'com.tngtech.jgiven.report.ReportGenerator'
  args '--targetDir=build/jgiven-reports', '--format=html'
  classpath = configurations.testCompile
}
check.dependsOn jgivenReport

task cucumber() {
  dependsOn assemble, compileTestJava
  doLast {
    javaexec {
      main = "cucumber.api.cli.Main"
      classpath = configurations.testRuntime + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', 'pretty', '--glue', 'com.xebia.tatraining.cucumber', 'src/cucumber/features']
    }
  }
}

task fitnesse(type: JavaExec) {
  dependsOn classes
  classpath = sourceSets.main.runtimeClasspath + configurations.fitnesseRuntime
  main "fitnesseMain.FitNesseMain"
  args "-p", "8000", "-e", "0"
}

task web(type: JettyRun) {
  httpPort 8000
  webAppSourceDirectory file('src/main/web')
  contextPath ""
}

wrapper {
  gradleVersion = '2.13'
}


class WriteFitNesseClasspath extends DefaultTask {
  @Input
  def classpath

  @OutputDirectory
  File pagePath

  @TaskAction
  def generatePage() {
    def contentTxt = project.file("${pagePath}/content.txt")
    contentTxt.createNewFile()
    contentTxt.withWriter { writer ->
      writer.writeLine("!path ${project.sourceSets.main.output.classesDir}")
      writer.writeLine("!path ${project.sourceSets.test.output.classesDir}")
      writer.writeLine("!path src/main/resources")
      writer.writeLine("!path src/test/resources")
      classpath.each { d ->
        writer.writeLine("!path $d")
      }
    }
  }
}
